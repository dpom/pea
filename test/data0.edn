[
 {:db/id       #db/id[:db.part/user -101]
  :howto/title "(Linux) Find The Bigest Dirs"
  :howto/text  "On linux shell:
du -Sk | sort -nr | head -n10 "}
 
 {:db/id       #db/id[:db.part/user -102]
  :howto/title "(Linux) Limit the cpu usage of a process."
  :howto/text  "This will limit the average amount of CPU process with the <pid> consumes (on linux shell):
 sudo cpulimit -p <pid> -l 50"}
 
 {:db/id       #db/id[:db.part/user -103]
  :howto/title "(Clojure) Sequential Destructuring"
  :howto/text  "This type of clojure destructuring can be used on any kind of data structure that can be traversed in linear time, including lists, vectors, and anything that can produce a sequence.
A complete example:
(def fruits [\"apple\" \"orange\" \"strawberry\" \"peach\" \"pear\" \"lemon\"])
(let [[item1 _ item3 & remaining :as all-fruits] fruits]
  (println \"The first and third fruits are\" item1 \"and\" item3)
  (println \"These were taken from\" all-fruits)
  (println \"The fruits after them are\" remaining))
;= The first and third fruits are apple and strawberry
;= These were taken from [apple orange strawberry peach pear lemon]
;= The fruits after them are (peach pear lemon)
"}
 
  {:db/id       #db/id[:db.part/user -104]
   :howto/title "(Clojure) Associative Destructuring"
   :howto/text  "Clojure associative destructuring is applied to associative (key-value) structures (including maps, records, vectors, etc). The associative bindings are concerned with concisely extracting values of the map by key.
A complete example:
(def my-map {:a \"A\" :b \"B\" :c 3 :d 4})
(let [{a :a, x :x, :or {x \"Not found!\"}, :as all} my-map]
  (println \"I got\" a \"from\" all)
  (println \"Where is x?\" x))
;= I got A from {:a \"A\" :b \"B\" :c 3 :d 4}
;= Where is x? Not found!
You might have noticed that this example still contains redundant information (the local binding name and the key name) in the associative destructuring form. The :keys key can be used to further remove the duplication:
(let [{:keys [name location description]} client]
  (println name location \"-\" description))
;= Super Co. Philadelphia - The worldwide leader in plastic tableware.
The :keys key is for associative values with keyword keys, but there are also :strs and :syms for string and symbol keys respectively. In all of these cases the vector contains symbols which are the local binding names.
(def string-keys {\"first-name\" \"Joe\" \"last-name\" \"Smith\"})
(let [{:strs [first-name last-name]} string-keys]
  (println first-name last-name))
;= Joe Smith
(def symbol-keys {'first-name \"Jane\" 'last-name \"Doe\"})
(let [{:syms [first-name last-name]} symbol-keys]
  (println first-name last-name))
;= Jane Doe"}

 ]
